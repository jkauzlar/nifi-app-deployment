/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.openapitools.client.model.BundleDTO;
import org.openapitools.client.model.ControllerServiceApiDTO;

/**
 * DocumentedTypeDTO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-19T16:10:34.866069300-08:00[America/Los_Angeles]")
public class DocumentedTypeDTO {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_BUNDLE = "bundle";
  @SerializedName(SERIALIZED_NAME_BUNDLE)
  private BundleDTO bundle;

  public static final String SERIALIZED_NAME_CONTROLLER_SERVICE_APIS = "controllerServiceApis";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_SERVICE_APIS)
  private List<ControllerServiceApiDTO> controllerServiceApis = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_USAGE_RESTRICTION = "usageRestriction";
  @SerializedName(SERIALIZED_NAME_USAGE_RESTRICTION)
  private String usageRestriction;

  public static final String SERIALIZED_NAME_DEPRECATION_REASON = "deprecationReason";
  @SerializedName(SERIALIZED_NAME_DEPRECATION_REASON)
  private String deprecationReason;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Set<String> tags = null;


  public DocumentedTypeDTO type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The fully qualified name of the type.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The fully qualified name of the type.")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    this.type = type;
  }


  public DocumentedTypeDTO bundle(BundleDTO bundle) {
    
    this.bundle = bundle;
    return this;
  }

   /**
   * Get bundle
   * @return bundle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BundleDTO getBundle() {
    return bundle;
  }


  public void setBundle(BundleDTO bundle) {
    this.bundle = bundle;
  }


  public DocumentedTypeDTO controllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    
    this.controllerServiceApis = controllerServiceApis;
    return this;
  }

  public DocumentedTypeDTO addControllerServiceApisItem(ControllerServiceApiDTO controllerServiceApisItem) {
    if (this.controllerServiceApis == null) {
      this.controllerServiceApis = new ArrayList<ControllerServiceApiDTO>();
    }
    this.controllerServiceApis.add(controllerServiceApisItem);
    return this;
  }

   /**
   * If this type represents a ControllerService, this lists the APIs it implements.
   * @return controllerServiceApis
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If this type represents a ControllerService, this lists the APIs it implements.")

  public List<ControllerServiceApiDTO> getControllerServiceApis() {
    return controllerServiceApis;
  }


  public void setControllerServiceApis(List<ControllerServiceApiDTO> controllerServiceApis) {
    this.controllerServiceApis = controllerServiceApis;
  }


  public DocumentedTypeDTO description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description of the type.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of the type.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public DocumentedTypeDTO usageRestriction(String usageRestriction) {
    
    this.usageRestriction = usageRestriction;
    return this;
  }

   /**
   * The description of why the usage of this component is restricted.
   * @return usageRestriction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of why the usage of this component is restricted.")

  public String getUsageRestriction() {
    return usageRestriction;
  }


  public void setUsageRestriction(String usageRestriction) {
    this.usageRestriction = usageRestriction;
  }


  public DocumentedTypeDTO deprecationReason(String deprecationReason) {
    
    this.deprecationReason = deprecationReason;
    return this;
  }

   /**
   * The description of why the usage of this component is restricted.
   * @return deprecationReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The description of why the usage of this component is restricted.")

  public String getDeprecationReason() {
    return deprecationReason;
  }


  public void setDeprecationReason(String deprecationReason) {
    this.deprecationReason = deprecationReason;
  }


  public DocumentedTypeDTO tags(Set<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public DocumentedTypeDTO addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new LinkedHashSet<String>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * The tags associated with this type.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The tags associated with this type.")

  public Set<String> getTags() {
    return tags;
  }


  public void setTags(Set<String> tags) {
    this.tags = tags;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentedTypeDTO documentedTypeDTO = (DocumentedTypeDTO) o;
    return Objects.equals(this.type, documentedTypeDTO.type) &&
        Objects.equals(this.bundle, documentedTypeDTO.bundle) &&
        Objects.equals(this.controllerServiceApis, documentedTypeDTO.controllerServiceApis) &&
        Objects.equals(this.description, documentedTypeDTO.description) &&
        Objects.equals(this.usageRestriction, documentedTypeDTO.usageRestriction) &&
        Objects.equals(this.deprecationReason, documentedTypeDTO.deprecationReason) &&
        Objects.equals(this.tags, documentedTypeDTO.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, bundle, controllerServiceApis, description, usageRestriction, deprecationReason, tags);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentedTypeDTO {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    bundle: ").append(toIndentedString(bundle)).append("\n");
    sb.append("    controllerServiceApis: ").append(toIndentedString(controllerServiceApis)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    usageRestriction: ").append(toIndentedString(usageRestriction)).append("\n");
    sb.append("    deprecationReason: ").append(toIndentedString(deprecationReason)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

