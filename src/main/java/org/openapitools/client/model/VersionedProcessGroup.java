/*
 * NiFi Rest Api
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * The version of the OpenAPI document: 1.5.0
 * Contact: dev@nifi.apache.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.openapitools.client.model.ThePositionOfAComponentOnTheGraph;
import org.openapitools.client.model.VersionedConnection;
import org.openapitools.client.model.VersionedControllerService;
import org.openapitools.client.model.VersionedFlowCoordinates;
import org.openapitools.client.model.VersionedFunnel;
import org.openapitools.client.model.VersionedLabel;
import org.openapitools.client.model.VersionedPort;
import org.openapitools.client.model.VersionedProcessor;
import org.openapitools.client.model.VersionedRemoteProcessGroup;

/**
 * VersionedProcessGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-19T16:10:34.866069300-08:00[America/Los_Angeles]")
public class VersionedProcessGroup {
  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private ThePositionOfAComponentOnTheGraph position;

  public static final String SERIALIZED_NAME_PROCESS_GROUPS = "processGroups";
  @SerializedName(SERIALIZED_NAME_PROCESS_GROUPS)
  private Set<VersionedProcessGroup> processGroups = null;

  public static final String SERIALIZED_NAME_REMOTE_PROCESS_GROUPS = "remoteProcessGroups";
  @SerializedName(SERIALIZED_NAME_REMOTE_PROCESS_GROUPS)
  private Set<VersionedRemoteProcessGroup> remoteProcessGroups = null;

  public static final String SERIALIZED_NAME_PROCESSORS = "processors";
  @SerializedName(SERIALIZED_NAME_PROCESSORS)
  private Set<VersionedProcessor> processors = null;

  public static final String SERIALIZED_NAME_INPUT_PORTS = "inputPorts";
  @SerializedName(SERIALIZED_NAME_INPUT_PORTS)
  private Set<VersionedPort> inputPorts = null;

  public static final String SERIALIZED_NAME_OUTPUT_PORTS = "outputPorts";
  @SerializedName(SERIALIZED_NAME_OUTPUT_PORTS)
  private Set<VersionedPort> outputPorts = null;

  public static final String SERIALIZED_NAME_CONNECTIONS = "connections";
  @SerializedName(SERIALIZED_NAME_CONNECTIONS)
  private Set<VersionedConnection> connections = null;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Set<VersionedLabel> labels = null;

  public static final String SERIALIZED_NAME_FUNNELS = "funnels";
  @SerializedName(SERIALIZED_NAME_FUNNELS)
  private Set<VersionedFunnel> funnels = null;

  public static final String SERIALIZED_NAME_CONTROLLER_SERVICES = "controllerServices";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_SERVICES)
  private Set<VersionedControllerService> controllerServices = null;

  public static final String SERIALIZED_NAME_VERSIONED_FLOW_COORDINATES = "versionedFlowCoordinates";
  @SerializedName(SERIALIZED_NAME_VERSIONED_FLOW_COORDINATES)
  private VersionedFlowCoordinates versionedFlowCoordinates;

  public static final String SERIALIZED_NAME_VARIABLES = "variables";
  @SerializedName(SERIALIZED_NAME_VARIABLES)
  private Map<String, String> variables = null;

  /**
   * Gets or Sets componentType
   */
  @JsonAdapter(ComponentTypeEnum.Adapter.class)
  public enum ComponentTypeEnum {
    CONNECTION("CONNECTION"),
    
    PROCESSOR("PROCESSOR"),
    
    PROCESS_GROUP("PROCESS_GROUP"),
    
    REMOTE_PROCESS_GROUP("REMOTE_PROCESS_GROUP"),
    
    INPUT_PORT("INPUT_PORT"),
    
    OUTPUT_PORT("OUTPUT_PORT"),
    
    REMOTE_INPUT_PORT("REMOTE_INPUT_PORT"),
    
    REMOTE_OUTPUT_PORT("REMOTE_OUTPUT_PORT"),
    
    FUNNEL("FUNNEL"),
    
    LABEL("LABEL"),
    
    CONTROLLER_SERVICE("CONTROLLER_SERVICE");

    private String value;

    ComponentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComponentTypeEnum fromValue(String value) {
      for (ComponentTypeEnum b : ComponentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComponentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComponentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComponentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComponentTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPONENT_TYPE = "componentType";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TYPE)
  private ComponentTypeEnum componentType;

  public static final String SERIALIZED_NAME_GROUP_IDENTIFIER = "groupIdentifier";
  @SerializedName(SERIALIZED_NAME_GROUP_IDENTIFIER)
  private String groupIdentifier;


  public VersionedProcessGroup identifier(String identifier) {
    
    this.identifier = identifier;
    return this;
  }

   /**
   * The component&#39;s unique identifier
   * @return identifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The component's unique identifier")

  public String getIdentifier() {
    return identifier;
  }


  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public VersionedProcessGroup name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The component&#39;s name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The component's name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public VersionedProcessGroup comments(String comments) {
    
    this.comments = comments;
    return this;
  }

   /**
   * The user-supplied comments for the component
   * @return comments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The user-supplied comments for the component")

  public String getComments() {
    return comments;
  }


  public void setComments(String comments) {
    this.comments = comments;
  }


  public VersionedProcessGroup position(ThePositionOfAComponentOnTheGraph position) {
    
    this.position = position;
    return this;
  }

   /**
   * Get position
   * @return position
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ThePositionOfAComponentOnTheGraph getPosition() {
    return position;
  }


  public void setPosition(ThePositionOfAComponentOnTheGraph position) {
    this.position = position;
  }


  public VersionedProcessGroup processGroups(Set<VersionedProcessGroup> processGroups) {
    
    this.processGroups = processGroups;
    return this;
  }

  public VersionedProcessGroup addProcessGroupsItem(VersionedProcessGroup processGroupsItem) {
    if (this.processGroups == null) {
      this.processGroups = new LinkedHashSet<VersionedProcessGroup>();
    }
    this.processGroups.add(processGroupsItem);
    return this;
  }

   /**
   * The child Process Groups
   * @return processGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The child Process Groups")

  public Set<VersionedProcessGroup> getProcessGroups() {
    return processGroups;
  }


  public void setProcessGroups(Set<VersionedProcessGroup> processGroups) {
    this.processGroups = processGroups;
  }


  public VersionedProcessGroup remoteProcessGroups(Set<VersionedRemoteProcessGroup> remoteProcessGroups) {
    
    this.remoteProcessGroups = remoteProcessGroups;
    return this;
  }

  public VersionedProcessGroup addRemoteProcessGroupsItem(VersionedRemoteProcessGroup remoteProcessGroupsItem) {
    if (this.remoteProcessGroups == null) {
      this.remoteProcessGroups = new LinkedHashSet<VersionedRemoteProcessGroup>();
    }
    this.remoteProcessGroups.add(remoteProcessGroupsItem);
    return this;
  }

   /**
   * The Remote Process Groups
   * @return remoteProcessGroups
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Remote Process Groups")

  public Set<VersionedRemoteProcessGroup> getRemoteProcessGroups() {
    return remoteProcessGroups;
  }


  public void setRemoteProcessGroups(Set<VersionedRemoteProcessGroup> remoteProcessGroups) {
    this.remoteProcessGroups = remoteProcessGroups;
  }


  public VersionedProcessGroup processors(Set<VersionedProcessor> processors) {
    
    this.processors = processors;
    return this;
  }

  public VersionedProcessGroup addProcessorsItem(VersionedProcessor processorsItem) {
    if (this.processors == null) {
      this.processors = new LinkedHashSet<VersionedProcessor>();
    }
    this.processors.add(processorsItem);
    return this;
  }

   /**
   * The Processors
   * @return processors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Processors")

  public Set<VersionedProcessor> getProcessors() {
    return processors;
  }


  public void setProcessors(Set<VersionedProcessor> processors) {
    this.processors = processors;
  }


  public VersionedProcessGroup inputPorts(Set<VersionedPort> inputPorts) {
    
    this.inputPorts = inputPorts;
    return this;
  }

  public VersionedProcessGroup addInputPortsItem(VersionedPort inputPortsItem) {
    if (this.inputPorts == null) {
      this.inputPorts = new LinkedHashSet<VersionedPort>();
    }
    this.inputPorts.add(inputPortsItem);
    return this;
  }

   /**
   * The Input Ports
   * @return inputPorts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Input Ports")

  public Set<VersionedPort> getInputPorts() {
    return inputPorts;
  }


  public void setInputPorts(Set<VersionedPort> inputPorts) {
    this.inputPorts = inputPorts;
  }


  public VersionedProcessGroup outputPorts(Set<VersionedPort> outputPorts) {
    
    this.outputPorts = outputPorts;
    return this;
  }

  public VersionedProcessGroup addOutputPortsItem(VersionedPort outputPortsItem) {
    if (this.outputPorts == null) {
      this.outputPorts = new LinkedHashSet<VersionedPort>();
    }
    this.outputPorts.add(outputPortsItem);
    return this;
  }

   /**
   * The Output Ports
   * @return outputPorts
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Output Ports")

  public Set<VersionedPort> getOutputPorts() {
    return outputPorts;
  }


  public void setOutputPorts(Set<VersionedPort> outputPorts) {
    this.outputPorts = outputPorts;
  }


  public VersionedProcessGroup connections(Set<VersionedConnection> connections) {
    
    this.connections = connections;
    return this;
  }

  public VersionedProcessGroup addConnectionsItem(VersionedConnection connectionsItem) {
    if (this.connections == null) {
      this.connections = new LinkedHashSet<VersionedConnection>();
    }
    this.connections.add(connectionsItem);
    return this;
  }

   /**
   * The Connections
   * @return connections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Connections")

  public Set<VersionedConnection> getConnections() {
    return connections;
  }


  public void setConnections(Set<VersionedConnection> connections) {
    this.connections = connections;
  }


  public VersionedProcessGroup labels(Set<VersionedLabel> labels) {
    
    this.labels = labels;
    return this;
  }

  public VersionedProcessGroup addLabelsItem(VersionedLabel labelsItem) {
    if (this.labels == null) {
      this.labels = new LinkedHashSet<VersionedLabel>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * The Labels
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Labels")

  public Set<VersionedLabel> getLabels() {
    return labels;
  }


  public void setLabels(Set<VersionedLabel> labels) {
    this.labels = labels;
  }


  public VersionedProcessGroup funnels(Set<VersionedFunnel> funnels) {
    
    this.funnels = funnels;
    return this;
  }

  public VersionedProcessGroup addFunnelsItem(VersionedFunnel funnelsItem) {
    if (this.funnels == null) {
      this.funnels = new LinkedHashSet<VersionedFunnel>();
    }
    this.funnels.add(funnelsItem);
    return this;
  }

   /**
   * The Funnels
   * @return funnels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Funnels")

  public Set<VersionedFunnel> getFunnels() {
    return funnels;
  }


  public void setFunnels(Set<VersionedFunnel> funnels) {
    this.funnels = funnels;
  }


  public VersionedProcessGroup controllerServices(Set<VersionedControllerService> controllerServices) {
    
    this.controllerServices = controllerServices;
    return this;
  }

  public VersionedProcessGroup addControllerServicesItem(VersionedControllerService controllerServicesItem) {
    if (this.controllerServices == null) {
      this.controllerServices = new LinkedHashSet<VersionedControllerService>();
    }
    this.controllerServices.add(controllerServicesItem);
    return this;
  }

   /**
   * The Controller Services
   * @return controllerServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Controller Services")

  public Set<VersionedControllerService> getControllerServices() {
    return controllerServices;
  }


  public void setControllerServices(Set<VersionedControllerService> controllerServices) {
    this.controllerServices = controllerServices;
  }


  public VersionedProcessGroup versionedFlowCoordinates(VersionedFlowCoordinates versionedFlowCoordinates) {
    
    this.versionedFlowCoordinates = versionedFlowCoordinates;
    return this;
  }

   /**
   * Get versionedFlowCoordinates
   * @return versionedFlowCoordinates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public VersionedFlowCoordinates getVersionedFlowCoordinates() {
    return versionedFlowCoordinates;
  }


  public void setVersionedFlowCoordinates(VersionedFlowCoordinates versionedFlowCoordinates) {
    this.versionedFlowCoordinates = versionedFlowCoordinates;
  }


  public VersionedProcessGroup variables(Map<String, String> variables) {
    
    this.variables = variables;
    return this;
  }

  public VersionedProcessGroup putVariablesItem(String key, String variablesItem) {
    if (this.variables == null) {
      this.variables = new HashMap<String, String>();
    }
    this.variables.put(key, variablesItem);
    return this;
  }

   /**
   * The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)
   * @return variables
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Variables in the Variable Registry for this Process Group (not including any ancestor or descendant Process Groups)")

  public Map<String, String> getVariables() {
    return variables;
  }


  public void setVariables(Map<String, String> variables) {
    this.variables = variables;
  }


  public VersionedProcessGroup componentType(ComponentTypeEnum componentType) {
    
    this.componentType = componentType;
    return this;
  }

   /**
   * Get componentType
   * @return componentType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ComponentTypeEnum getComponentType() {
    return componentType;
  }


  public void setComponentType(ComponentTypeEnum componentType) {
    this.componentType = componentType;
  }


  public VersionedProcessGroup groupIdentifier(String groupIdentifier) {
    
    this.groupIdentifier = groupIdentifier;
    return this;
  }

   /**
   * The ID of the Process Group that this component belongs to
   * @return groupIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the Process Group that this component belongs to")

  public String getGroupIdentifier() {
    return groupIdentifier;
  }


  public void setGroupIdentifier(String groupIdentifier) {
    this.groupIdentifier = groupIdentifier;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VersionedProcessGroup versionedProcessGroup = (VersionedProcessGroup) o;
    return Objects.equals(this.identifier, versionedProcessGroup.identifier) &&
        Objects.equals(this.name, versionedProcessGroup.name) &&
        Objects.equals(this.comments, versionedProcessGroup.comments) &&
        Objects.equals(this.position, versionedProcessGroup.position) &&
        Objects.equals(this.processGroups, versionedProcessGroup.processGroups) &&
        Objects.equals(this.remoteProcessGroups, versionedProcessGroup.remoteProcessGroups) &&
        Objects.equals(this.processors, versionedProcessGroup.processors) &&
        Objects.equals(this.inputPorts, versionedProcessGroup.inputPorts) &&
        Objects.equals(this.outputPorts, versionedProcessGroup.outputPorts) &&
        Objects.equals(this.connections, versionedProcessGroup.connections) &&
        Objects.equals(this.labels, versionedProcessGroup.labels) &&
        Objects.equals(this.funnels, versionedProcessGroup.funnels) &&
        Objects.equals(this.controllerServices, versionedProcessGroup.controllerServices) &&
        Objects.equals(this.versionedFlowCoordinates, versionedProcessGroup.versionedFlowCoordinates) &&
        Objects.equals(this.variables, versionedProcessGroup.variables) &&
        Objects.equals(this.componentType, versionedProcessGroup.componentType) &&
        Objects.equals(this.groupIdentifier, versionedProcessGroup.groupIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identifier, name, comments, position, processGroups, remoteProcessGroups, processors, inputPorts, outputPorts, connections, labels, funnels, controllerServices, versionedFlowCoordinates, variables, componentType, groupIdentifier);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VersionedProcessGroup {\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    processGroups: ").append(toIndentedString(processGroups)).append("\n");
    sb.append("    remoteProcessGroups: ").append(toIndentedString(remoteProcessGroups)).append("\n");
    sb.append("    processors: ").append(toIndentedString(processors)).append("\n");
    sb.append("    inputPorts: ").append(toIndentedString(inputPorts)).append("\n");
    sb.append("    outputPorts: ").append(toIndentedString(outputPorts)).append("\n");
    sb.append("    connections: ").append(toIndentedString(connections)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    funnels: ").append(toIndentedString(funnels)).append("\n");
    sb.append("    controllerServices: ").append(toIndentedString(controllerServices)).append("\n");
    sb.append("    versionedFlowCoordinates: ").append(toIndentedString(versionedFlowCoordinates)).append("\n");
    sb.append("    variables: ").append(toIndentedString(variables)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    groupIdentifier: ").append(toIndentedString(groupIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

